name: Deploy to AWS after tests pass

on:
  workflow_run:
    workflows: ["CI Pipeline on master > uni test - IT"]
    types:
      - completed

jobs:
  prepare:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean install

  deploy-to-aws:
    needs: prepare
    runs-on: ubuntu-latest

    env:
      ECR_REPOSITORY: simple-springboot-app-repository
      AWS_REGION: eu-north-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin \
          $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          IMAGE_TAG=$GITHUB_SHA
          IMAGE_NAME=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY

          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

          echo "IMAGE_URI=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Generate Dockerrun.aws.json
        run: |
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "$IMAGE_URI",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "8080"
              }
            ]
          }
          EOF

      - name: Deploy to Elastic Beanstalk
        run: |
          zip -r deploy.zip Dockerrun.aws.json

          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          VERSION_LABEL="${GITHUB_SHA}-$(date +%s)"
          S3_KEY=$ECR_REPOSITORY/$GITHUB_SHA.zip
          S3_BUCKET=elasticbeanstalk-${AWS_REGION}-${ACCOUNT_ID}

          aws s3 cp deploy.zip s3://$S3_BUCKET/$S3_KEY

          aws elasticbeanstalk create-application-version \
            --application-name $ECR_REPOSITORY \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=$S3_KEY

          aws elasticbeanstalk update-environment \
            --environment-name ${ECR_REPOSITORY}-env \
            --version-label "$VERSION_LABEL"
